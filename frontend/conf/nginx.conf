events {
    worker_connections 1024;  # 이벤트 모듈에 대한 워커 연결의 최대 수를 설정. 이 수치는 동시에 처리 가능한 클라이언트 수를 의미
}

http {
    include mime.types;  # MIME 타입을 포함
    default_type application/octet-stream;  # 기본 MIME 타입 설정

    server {
        listen 443 ssl;  # 443 포트를 사용하여 SSL활성화
        server_name _;  # 사용자가 어떤 IP나 호스트 이름으로 HTTPS 요청을 보내더라도 Nginx가 그 요청을 받아들일 것임

        # SSL 인증서 경로
        ssl_certificate /etc/ssl/certs/nginx.crt;  # SSL 인증서 파일의 경로
        ssl_certificate_key /etc/ssl/private/nginx.key;  # SSL 키 파일의 경로

        # TLS 설정
        ssl_protocols TLSv1.2 TLSv1.3;  # 허용하는 TLS 버전
        ssl_prefer_server_ciphers off;  # 서버 쪽의 암호화 방식 선택 우선권을 비활성화
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM;  # 허용되는 암호화 알고리즘 리스트

        root /var/www/html;  # 정적 파일이 위치하는 디렉토리
        index index.html;  # 서버에 접속했을 때, 기본적으로 제공할 파일 목록


        location / {
            try_files $uri $uri/ /index.html;  # 요청된 파일이나 디렉토리가 없는 경우 index.html에 머무르도록 설정
        }

        # https://www.spacepong/api URL에 대한 요청은 django(백엔드)로 라우팅
        # 42 로그인용 URL
        location /auth42/ {
            proxy_pass http://backend:8000;  # 모든 API 요청을 django 컨테이너의 8000 포트로 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # http 헤더에 클라이언트 IP를 추가
            proxy_set_header Host $host;  # http 헤더에 클라이언트의 호스트 이름을 추가
            proxy_redirect off;  # 프록시 redirect 비활성화 (백엔드의 리다이렉션 응답을 그대로 클라이언트에게 전달)
        }

        # DB 데이터 요청을 위한 URL
        location /spacepong/ {
            proxy_pass http://backend:8000;  # 모든 API 요청을 django 컨테이너의 8000 포트로 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # http 헤더에 클라이언트 IP를 추가
            proxy_set_header Host $host;  # http 헤더에 클라이언트의 호스트 이름을 추가
            proxy_redirect off;  # 프록시 redirect 비활성화 (백엔드의 리다이렉션 응답을 그대로 클라이언트에게 전달)
        }

        # translation 요청을 위한 URL
        location /translation/ {
            proxy_pass http://backend:8000;  # 모든 API 요청을 django 컨테이너의 8000 포트로 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # http 헤더에 클라이언트 IP를 추가
            proxy_set_header Host $host;  # http 헤더에 클라이언트의 호스트 이름을 추가
            proxy_redirect off;  # 프록시 redirect 비활성화 (백엔드의 리다이렉션 응답을 그대로 클라이언트에게 전달)
        }

        location /twofactor/ {
            proxy_pass http://backend:8000;  # 모든 API 요청을 django 컨테이너의 8000 포트로 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # http 헤더에 클라이언트 IP를 추가
            proxy_set_header Host $host;  # http 헤더에 클라이언트의 호스트 이름을 추가
            proxy_redirect off;  # 프록시 redirect 비활성화 (백엔드의 리다이렉션 응답을 그대로 클라이언트에게 전달)
        }

        # alias validate
        location /aliases/ {
            proxy_pass http://backend:8000;  # 모든 API 요청을 django 컨테이너의 8000 포트로 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # http 헤더에 클라이언트 IP를 추가
            proxy_set_header Host $host;  # http 헤더에 클라이언트의 호스트 이름을 추가
            proxy_redirect off;  # 프록시 redirect 비활성화 (백엔드의 리다이렉션 응답을 그대로 클라이언트에게 전달)
        }



        location /ws/channel/ {
            proxy_pass http://backend:8000;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_redirect off;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # 추가된 부분: MIME 타입 설정
        location ~* \.(js|css|html|json)$ {
            add_header Cache-Control "no-cache";
            try_files $uri =404;
        }
    }
}